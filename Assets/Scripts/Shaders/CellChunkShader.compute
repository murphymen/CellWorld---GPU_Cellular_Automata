#pragma kernel ClearData;
#pragma kernel OneStep;
#pragma kernel DrawChunk;
#pragma kernel CopyInput;
#pragma kernel InsertCells;

#include "Assets/Scripts/Shaders/Types/Cell.cginc"
#include "Assets/Scripts/Shaders/Tools/Directions.cginc"
#include "Assets/Scripts/Shaders/Tools/CellOperations.cginc"
#include "Assets/Scripts/Shaders/CellAtlas/SandBehaviour.cginc"
#include "Assets/Scripts/Shaders/CellAtlas/SandEmmiterBehaviour.cginc"


[numthreads(8, 8, 1)]
void ClearData (uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if(ChunkBoundaryCheck(id.xy))
        return;

    // Make flatIdex with y up to down
    uint flatIndex = id.x + (id.y * _width);
    
    _chunkBuffer[flatIndex].isActive = 0;
    _chunkBuffer[flatIndex].isMoved = 0;
    _chunkBuffer[flatIndex].value = 0;
    _chunkBuffer[flatIndex].type = 0;
}

[numthreads(8,8,1)]
void CopyInput (uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if(!ChunkBoundaryCheck(id.xy))
        return;

    uint inFlatIndex = id.x + (id.y * _inputWidth);
    uint outFlatIndex = id.x + (id.y * _width);
    _chunkBuffer[outFlatIndex].type = _inputBuffer[inFlatIndex];
    _chunkBuffer[outFlatIndex].isActive = 1;
    _chunkBuffer[outFlatIndex].isMoved = 0;

    // Debug
    if(_debug) 
        _chunkBuffer[0].type = 666;
}

[numthreads(8,8,1)]
void OneStep (uint3 id : SV_DispatchThreadID)
{
    if(!ChunkBoundaryCheck(id.xy))
        return;

    uint flatIndex = id.x + (id.y * _width);

    switch(_chunkBuffer[flatIndex].type)
    {
        case 1:
            SandBehavior(uint2(id.x, id.y));
            break;
        case 10:
            SandEmmiterBehaviour(id.xy);
            break;
    }
}

[numthreads(8,8,1)]
void DrawChunk (uint3 id : SV_DispatchThreadID)
{
    if(!ChunkBoundaryCheck(id.xy))
        return;

    uint flatIndex = id.x + (id.y * _width);

    _chunkBuffer[2].type = 666;
    switch(_chunkBuffer[flatIndex].type)
    {
        case 0:
            _mainBuffer[id.xy] = float4(0, 0, 0, 1);
            break;
        case 1:
            _mainBuffer[id.xy] = float4(.5, .5, .5, 1);
            break;
        case 10:
            _mainBuffer[id.xy] = float4(0, 1, 0, 1);
            break;
        case 666:
            _mainBuffer[id.xy] = float4(1, 0, 0, 1);
            break;
    }
}

[numthreads(1,1,1)]
void InsertCells (uint3 id : SV_DispatchThreadID)
{
    for(uint i=0; i<_inputLength; i++)
    {
        if(ChunkBoundaryCheck(uint2(_inputCellsBuffer[i].position.x, _inputCellsBuffer[i].position.y)))
        {
            _chunkBuffer[(_inputCellsBuffer[i].position.x) + (_inputCellsBuffer[i].position.y * _width)].type = _inputCellsBuffer[i].type;
            _chunkBuffer[(_inputCellsBuffer[i].position.x) + (_inputCellsBuffer[i].position.y * _width)].isActive = 1;
            _chunkBuffer[(_inputCellsBuffer[i].position.x) + (_inputCellsBuffer[i].position.y * _width)].isMoved = 0;
        }
    }
}

